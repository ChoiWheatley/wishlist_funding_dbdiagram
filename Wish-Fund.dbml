Table Account {
  accId integer [pk]
  bank  enum [not null]
  accNum string [not null]
}

Table Address {
  addrId integer [pk, unique]
  userId integer [ref: > User.userId]
  addrRoad varchar [not null]
  addrDetl varchar [not null]
  addrZip varchar [not null]
  addrNick varchar [not null]
  recvName varchar [not null]
  recvPhone varchar [not null]
  recvReq varchar
  isDef bool [default: false]
}

Table Comment {
  comId integer [pk]
  fundId integer [not null, ref: > Funding.fundId]
  authorId integer [not null, ref: > User.userId]
  content varchar [not null]
  regAt timestamp
  isMod bool [not null, default: false]
  isDel bool [not null, default: false]
}

Table Donation {
  donId integer [pk, unique]
  fundId integer [ref: > Funding.fundId]
  userId integer [ref: > User.userId]
  donStat enum [not null]
  orderId varchar [not null, unique] // 비회원이 후원한 경우 주문번호(order id)를 통해서 자신의 후원 정보를 볼 수 있어야 하기 때문.
  donAmnt integer [not null, default: 0]
  regAt timestamp
  delAt timestamp
}

Table Error {
  errId integer [pk]
  method varchar [not null]
  url varchar [not null]
  agent varchar [not null]
  ip varchar [not null]
  parameters varchar [not null]
  httpCode varchar [not null]
  errCode varchar
  errName varchar [not null]
  errStack varchar [not null]
  regAt timestamp
}

Table Friend {
  userId integer [pk, ref: > User.userId]
  frdId integer [pk, ref: > User.userId]
  status enum [not null]
  regAt timestamp
}

Table Funding {
  fundId integer [pk, unique]
  fundUuid varchar [unique]
  fundUser integer [ref: > User.userId]
  fundTitle varchar [not null]
  fundCont varchar [not null]
  fundTheme enum [not null]
  fundPubl bool [default: true]
  fundGoal integer [not null]
  fundSum integer [default: 0]
  fundAddrRoad varchar [not null]
  fundAddrDetl varchar [not null]
  fundAddrZip varchar [not null]
  fundRecvName varchar [not null]
  fundRecvPhone varchar [not null]
  fundRecvReq varchar
  defaultImgId integer [null, ref: - Image.imgId]
  endAt timestamp [not null]
  regAt timestamp
  uptAt timestamp
  delAt timestamp
}

Table Gift {
  giftId integer [pk, unique]
  fundId integer [ref: > Funding.fundId]
  giftUrl varchar [not null]
  giftCrd integer [not null]
  giftOpt varchar
  giftCont varchar
  imgId integer [not null, ref: < Image.imgId]
}

Table Gratitude {
  gratId integer [pk]
  gratTitle varchar [not null]
  gratCont varchar [not null]
  defaultImgId integer [null, ref: - Image.imgId]
  regAt timestamp
  isDel bool [default: false]
}

Table Image {
  imgId integer [pk, not null]
  imgUrl varchar [not null]
  imgType enum
  subId integer 
  creatorUserId integer [null, ref: > User.userId]
}

Table Notification {
  notiId integer [pk]
  recvId integer [not null, ref: > User.userId]
  sendId integer [not null, ref: > User.userId]
  notiType enum [not null]
  reqType enum [not null]
  subId varchar
  notiTime timestamp
}

Table OpenBankToken {
  obtId integer [pk]
  accessToken varchar [not null]
  refreshToken varchar [not null]
  expiresIn integer [not null]
  userSeq integer [not null]
}

Table RollingPaper {
  rollId integer [pk, ref: - Donation.donId]
  defaultImgId integer [null, ref: - Image.imgId]
  fundId integer
  rollMsg varchar [default: '축하해요']
  delAt timestamp
}

Table User {
  userId integer [pk, unique]
  authId varchar [null]
  authType enum
  userNick varchar [unique]
  userPw varchar
  userName varchar
  userPhone varchar [unique]
  userEmail varchar
  userBirth datetime
  userAcc integer [ref: - Account.accId]
  defaultImgId integer [ref: > Image.imgId]
  regAt timestamp
  uptAt timestamp
  delAt timestamp
}

Table News {
  newsId integer [pk]
  userId integer [not null, ref: > User.userId]
  newsType enum [not null]
  newsTime timestamp
}

Table provisional_donation {
  provDonId integer [pk, increment, note: "Primary key, auto-increment"]
  senderSig varchar [not null, note: "Signature of the sender"]
  amount integer [not null, note: "Donation amount"]
  status provisional_donation_status_enum [not null, default: 'Pending', note: "Donation status"]
  regAt timestamp [not null, default: "now()", note: "Registration timestamp"]
  delAt timestamp [note: "Deletion timestamp (nullable)"]
  senderUserId integer [ref: > User.userId, note: "Foreign key to user table"]
  fundId integer [ref: > Funding.fundId, note: "Foreign key to funding table"]
}

Table deposit {
  depositId integer [pk, increment, note: "Primary key, auto-increment"]
  senderSig varchar [not null, note: "Signature of the sender"]
  receiver varchar [not null, note: "Receiver of the deposit"]
  amount integer [not null, note: "Deposit amount"]
  transferDate date [not null, note: "Date of transfer"]
  depositBank varchar [not null, note: "Bank of the deposit"]
  depositAccount varchar [not null, note: "Account receiving the deposit"]
  withdrawalAccount varchar [not null, note: "Account for withdrawal"]
  status deposit_status_enum [not null, note: "Status of the deposit"]
  regAt timestamp [not null, default: "now()", note: "Registration timestamp"]
  delAt timestamp [note: "Deletion timestamp (nullable)"]
}

Enum AuthType {
  Kakao
  Naver
  Google
  Jwt
}

Enum BankType {
  Kakaobank  // 카카오뱅크
  Nonghyup  // 농협
  Kookmin  // 국민은행
  Shinhan  // 신한은행
  Woori  // 우리은행
  Ibk  // IBK기업은행
  Hana  // 하나은행
  Daegu  // 대구은행
  Kyongnam  // 경남은행
  Gwangju  // 광주은행
  Busan  // 부산은행
  Jeju  // 제주은행
  Deutschebank  // 도이치은행
  Kdb  // KDB은행
  Kfcc  // 새마을금고
  Suhyup  // 수협
  Nacufok // 신협
  Citybank // 씨티은행
  Tossbank  // 토스뱅크
  Scbank  // SC제일은행
  Kbank  // 케이뱅
  Sbi // SBI저축은행
  Kopo // 우체국은행
  Jeonbuk // 전북은행
  Nhinvest // NH투자증권
}

Enum DefaultImgId {
  Funding
  Funding2
  Funding3
  Gratitude
  Gratitude2
  Gratitude3
  RollingPaper
  RollingPaper2
  RollingPaper3
  User
  User2
  User3
}

Enum DonationStatus {
  Donated
  WaitingRefund
  RefundComplete
}

Enum ErrorCode {
  FundingNotExists
  FundingClosed
  IncorrectGiftUrl
  GratitudeAlreadyExists
  GratitudeNotExist
  IncorrectImageUrl
  UserNotFound
  UserNotUpdated
  UserAlreadyDeleted
  NotValidEmail
  NotValidPhone
  NotValidNick
  PasswordIncorrect
  UserFailedToCreate
  AlreadySendRequest
  AlreadyFriend
  WrongNotiType
  JwtNotExpired
  JwtExpired
  NotValidToken
  TokenMissing
  RefreshExpire
  UserAlreadyExists
  FailedLogout
  RedisServerError
  DefaultImgIdNotExist
  AccountNotFound
}

Enum ErrorMsg {
  FundingNotExists
  FundingClosed
  IncorrectGiftUrl
  GratitudeAlreadyExists
  GratitudeNotExist
  IncorrectImageUrl
  UserNotFound
  UserNotUpdated
  UserAlreadyDeleted
  NotValidEmail
  NotValidPhone
  NotValidNick
  PasswordIncorrect
  UserFailedToCreate
  AlreadySendRequest
  AlreadyFriend
  WrongNotiType
  JwtNotExpired
  JwtExpired
  NotValidToken
  TokenMissing
  RefreshExpire
  UserAlreadyExists
  FailedLogout
  RedisServerError
  DefaultImgIdNotExist
  AccountNotFound
}

Enum FriendStatus {
  Friend
  Requested
}

Enum FundTheme {
  Birthday
  Anniversary
  Donation
}

Enum ImgType {
  Gratitude
  Gift
  Funding
  User
  RollingPaper
}

Enum NotiType {
  IncomingFollow // 들어오는 친구 요청
  AcceptFollow // 내 요청에 대한 친구의 수락
  SatisfyingMyFunding // 내 펀딩 달성
  DueDonatedFunding // 내가 후원한 펀딩 마감
  WriteGratitude // 감사 인사 작성 권유
  CheckGratitude // 내가 후원한 펀딩 감사인사 확인
  IncomingDonation // 내 펀딩에 들어온 새로운 후원
  NewComment // 새로운 댓
}

Enum ReqType {
  NotResponse // 00 // 요청에 응답하지 않은 상태
  Accept // 01 // 요청을 수락한 상태
  Refuse // 02 // 요청을 거절한 상태
  UnWritten // 03 // 감사인사를 작성하지 않은 상태
  Written // 04 // 감사인사를 작성한 상태
}

Enum NewsType {
  NewFunding // 친구의 새로운 펀딩 개설
  DueFunding // 친구의 펀딩 마감기한 임박
  Gratitude // 친구의 펀딩 감사인사
}

Enum provisional_donation_status_enum {
  Pending
  Approved
  Rejected
  Refunded
}

Enum deposit_status_enum {
  Unmatched
  Matched
  Orphan
}
